import os
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

# üîç –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ panic-–ª–æ–≥–∞
def diagnose_from_panic(text: str) -> str:
    text = text.lower()
    conclusions = []

    if "audio-codec" in text or "audiocodec" in text:
        conclusions.append(
            "1) –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞—É–¥–∏–æ –∫–æ–¥–µ–∫–∞\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –¥–∏–∫—Ç–æ—Ñ–æ–Ω:\n"
            "- –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è ‚Äî –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–∞–º–æ–º –∞—É–¥–∏–æ –∫–æ–¥–µ–∫–µ\n"
            "- –ï—Å–ª–∏ –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ—Ç –∑–≤—É–∫–∞ ‚Äî –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã, —à–ª–µ–π—Ñ—ã)"
        )

    if "iap" in text or "portmicro" in text or "hydra" in text or "lightning" in text:
        conclusions.append(
            "2) –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ Lightning\n"
            "- –í–æ–∑–º–æ–∂–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç: –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä Hydra\n"
            "- –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∂–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —à–ª–µ–π—Ñ"
        )

    if "baseband" in text:
        conclusions.append(
            "3) –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–º–æ–º (Baseband)\n"
            "- –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ–º–∞, –º–æ–¥–µ–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –ø–∏—Ç–∞–Ω–∏—è"
        )

    if "smc-charger" in text:
        conclusions.append(
            "4) –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä—è–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ (smc-charger)\n"
            "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ø–∏ –ø–∏—Ç–∞–Ω–∏—è –∏ –∑–∞—Ä—è–¥–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
        )

    if not conclusions:
        conclusions.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–±–æ—è.")

    return "\n\n".join(conclusions)


# üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document:
        return

    file = await context.bot.get_file(document.file_id)
    file_path = f"/tmp/{document.file_name}"
    await file.download_to_drive(file_path)

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return
    finally:
        os.remove(file_path)

    diagnosis = diagnose_from_panic(content)
    await update.message.reply_text(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω iOS PANIC-–ª–æ–≥:\n\n{diagnosis}")


# üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
        return

    app = ApplicationBuilder().token(token).build()
    app.add_handler(MessageHandler(
        filters.Document.FILE_EXTENSION("ips") | filters.Document.FILE_EXTENSION("txt"),
        handle_file
    ))

    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == "__main__":
    main()
