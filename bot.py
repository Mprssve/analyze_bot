import os
import re
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters
)

# üîç –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ panic-–ª–æ–≥–∞
def diagnose_from_panic(text: str) -> str:
    text = text.lower()
    conclusions = []

    if "audio-codec" in text or "60\ns.sensor array 0 - 7" in text:
        conclusions.append(
            "**–¢—ã –¥—ç–±–∏–ª**\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –¥–∏–∫—Ç–æ—Ñ–æ–Ω:\n"
            "- –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è ‚Äî –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–∞–º–æ–º –∞—É–¥–∏–æ –∫–æ–¥–µ–∫–µ\n"
            "- –ï—Å–ª–∏ –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ—Ç –∑–≤—É–∫–∞ ‚Äî –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã, —à–ª–µ–π—Ñ—ã)"
        )
    if "tg0b" in text or "tv0b" in text:
        conclusions.append(
            "**–¢—ã –¥—ç–±–∏–ª**\n"
            "'–≠—Ç–æ –∂–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä!':\n"
            "- –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞\n"
            "- –ø—Ä–æ–±–ª–µ–º—ã –ø–æ –ª–∏–Ω–∏–∏ SWI"
        )

    if "iap" in text or "portmicro" in text or "hydra" in text or "lightning" in text:
        conclusions.append(
            "**2) –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ Lightning**\n"
            "- –í–æ–∑–º–æ–∂–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç: –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä Hydra\n"
            "- –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∂–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —à–ª–µ–π—Ñ"
        )

    if "baseband" in text:
        conclusions.append(
            "**3) –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–º–æ–º (Baseband)**\n"
            "- –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ–º–∞, –º–æ–¥–µ–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –ø–∏—Ç–∞–Ω–∏—è"
        )

    if "smc-charger" in text:
        conclusions.append(
            "**4) –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä—è–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ (smc-charger)**\n"
            "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ø–∏ –ø–∏—Ç–∞–Ω–∏—è –∏ –∑–∞—Ä—è–¥–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
        )

    if not conclusions:
        conclusions.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–±–æ—è.")

    return "\n\n".join(conclusions)

# –ü–∞—Ä—Å–µ—Ä panic-–ª–æ–≥–æ–≤
def parse_panic_log(text: str) -> str:
    output = []

    if "panic" in text.lower():
        timestamp = re.search(r'timestamp\s*:\s*(.+)', text)
        panic_string = re.search(r'panicString\s*:\s*(.+)', text)
        version = re.search(r'OS Version:\s*(.+)', text) or re.search(r'os_version\s*:\s*(.+)', text)
        bug_type = re.search(r'bug_type\s*:\s*(\d+)', text)

        output.append("**–Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö**:")
        if timestamp:
            output.append(f"- –í—Ä–µ–º—è —Å–±–æ—è: {timestamp.group(1)}")
        if version:
            output.append(f"- –í–µ—Ä—Å–∏—è iOS: {version.group(1)}")
        if panic_string:
            output.append(f"- –ü—Ä–∏—á–∏–Ω–∞ —Å–±–æ—è: {panic_string.group(1)}")
        if bug_type:
            output.append(f"- –¢–∏–ø –æ—à–∏–±–∫–∏: {bug_type.group(1)}")

        return "\n".join(output)
    else:
        return "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç panic-–ª–æ–≥–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ iOS panic-–ª–æ–≥–æ–≤.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª .ips –∏–ª–∏ .txt, –∏ —è –ø–æ–∫–∞–∂—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document

    if not document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .ips –∏–ª–∏ .txt.")
        return

    filename = document.file_name.lower()
    if not (filename.endswith(".ips") or filename.endswith(".txt")):
        await update.message.reply_text("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ips –∏–ª–∏ .txt.")
        return

    telegram_file = await document.get_file()
    file_bytes = await telegram_file.download_as_bytearray()
    text = file_bytes.decode("utf-8", errors="ignore")

    result = parse_panic_log(text)
    result = diagnose_from_panic(text)
    await update.message.reply_text(result)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
        return

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
